import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.text.DecimalFormat;
import java.util.concurrent.Callable;

import picocli.CommandLine;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.simple.parser.ParseException;
import org.apache.commons.io.FileUtils;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

public class App implements Callable<Integer> {

    @Parameters(index = "0", defaultValue = "OFF", description = "Search command")
    private String command;

    @Parameters(index = "1",  arity = "1..*",defaultValue = "OFF", description = "Query Input")
    private String[] query;

    @Option(names = { "--w", "--world" }, required =false, description = "Correlation between an earth day, and an earth year")
    public static boolean worldCor = false;

    @Option(names = { "--cc", "--clear_cache"}, required =false, description = "Clear cache folder and files")
    private static boolean clear_cache = false;

    @Override
    public Integer call() throws Exception {
        if(clear_cache){
            File file = new File("app\\src\\main\\resources\\cache"); 
            FileUtils.deleteDirectory(file);
            return 0;
        }
        String searchQuery = String.join("%20", query);
        searchQuery = searchQuery.replaceAll("\'", "");
        Cache cache = new Cache();
        PeopleResponse peopleResponse = new PeopleResponse(false, null);
        peopleResponse = cache.readPeople(String.join(" ", query));

        boolean foundPeople = peopleResponse.getFound();
        boolean foundPlanet = false;
        if (foundPeople && worldCor) {
            foundPlanet = cache.readPlanet(String.join(" ", peopleResponse.getPlanetUid()));
        }
        if (!foundPeople || (worldCor && !foundPlanet)) {
            peopleSearch(searchQuery, peopleResponse.getPlanetUid());
        }
        return 0;
    }

    public void peopleSearch(String searchQuery, String planetUid) {
        if (planetUid != null) {
            try {
                searchResult("people-planet found: " + planetUid);
            } catch (IOException | ParseException e) {
                e.printStackTrace();
            }
            return;
        }
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://www.swapi.tech/api/people/?name=" + searchQuery)).build();

        client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(HttpResponse::body).thenAccept(t -> {
            try {
                searchResult(t);
            } catch (IOException | ParseException e) {
                e.printStackTrace();
            }
        }).join();
    }

    public void planetSearch(String searchQuery) {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(searchQuery)).build();

        client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(HttpResponse::body).thenAccept(t -> {
            try {
                searchResult(t);
            } catch (IOException | ParseException e) {
                e.printStackTrace();
            }
        }).join();
    }

    public static void searchResult(String response) throws FileNotFoundException, IOException, ParseException {

        if (response.contains("people-planet found:") && worldCor) {
            App app = new App();
            app.planetSearch("https://www.swapi.tech/api/planets/"
                    + response.substring(response.lastIndexOf(":") + 2, response.length()));
            return;
        }
        JSONObject info = new JSONObject(response);
        JSONObject properties = null;
        JSONArray result = null;
        JSONObject resultObj = null;

        if (info.has("result")) {
            result = info.optJSONArray("result");

            if (result != null) {
                properties = result.getJSONObject(0);
                if (properties.getString("description").toString().equals("A person within the Star Wars universe")) {
                    System.out.println("");
                    System.out.println("Name: " + properties.getJSONObject("properties").getString("name").toString());
                    System.out.println(
                            "Height: " + properties.getJSONObject("properties").getString("height").toString());
                    System.out.println("Mass: " + properties.getJSONObject("properties").getString("mass").toString());
                    System.out.println(
                            "Birth Year: " + properties.getJSONObject("properties").getString("birth_year").toString());

                    People people = new People();
                    people.setBirth(properties.getJSONObject("properties").getString("birth_year").toString());
                    people.setMass(properties.getJSONObject("properties").getString("mass").toString());
                    people.setHeight(properties.getJSONObject("properties").getString("height").toString());
                    people.setName(properties.getJSONObject("properties").getString("name").toString());
                    String home = properties.getJSONObject("properties").getString("homeworld").toString();
                    home = home.substring(home.lastIndexOf("/") + 1, home.length());
                    people.setHomeworld(home);

                    Cache store = new Cache();
                    store.storePeople(people);
                    if (worldCor && store.readPlanet(String.join(" ", people.getHomeworld()))) {
                        return;
                    }
                }
                if (worldCor) {
                    App app = new App();
                    app.planetSearch(properties.getJSONObject("properties").getString("homeworld").toString());
                }
            }

            if (worldCor) {
                resultObj = info.optJSONObject("result");

                worldCor = false;
                System.out.println("\n");
                System.out.println("Homeworld");
                System.out.println("-------------");
                System.out.println("Name: " + resultObj.getJSONObject("properties").getString("name"));
                System.out.println("Population: " + resultObj.getJSONObject("properties").getString("population"));
                System.out.println("\n");
                double i = resultObj.getJSONObject("properties").getDouble("orbital_period") / 365;
                double j = resultObj.getJSONObject("properties").getDouble("rotation_period") / 24;
                DecimalFormat df2 = new DecimalFormat("#.##");
                System.out.println("On " + resultObj.getJSONObject("properties").getString("name")
                        + ", 1 year on earth is " + df2.format(i) + " years and 1 day " + df2.format(j) + "days");
                Homeworld homeworld = new Homeworld(resultObj.getJSONObject("properties").getString("name"),
                        resultObj.getJSONObject("properties").getString("population"),
                        resultObj.getJSONObject("properties").getString("orbital_period"),
                        resultObj.getJSONObject("properties").getString("rotation_period"));
                int uid = resultObj.getInt("uid");
                Cache store = new Cache();
                store.storePlanet(homeworld, uid);
            }
        } else {
            System.out.println("The force is not strong within you");
        }
    }

    public static void main(String[] args) {
        int exitCode = new CommandLine(new App()).execute(args);
        System.exit(exitCode);
    }

}
